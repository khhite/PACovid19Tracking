x = "", y = "Number of Cases")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date,y=value, fill=measurement)) +
geom_bar(stat="identity")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date,y=value, fill=measurement)) +
geom_bar(position="fill")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, fill=measurement)) +
geom_bar(position="fill")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases in Nursing Homes Compared to All Others")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Montgomery County Cases in Nursing Homes Compared to All Others",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases in Nursing Homes Compared to All Others",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases in Nursing Homes Compared to All Others",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases in Nursing Homes Compared to All Others",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
fill="")
?theme
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot(aes(x=Date, y=value, fill=measurement)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases in Nursing Homes Compared to All Others",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
fill="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases", fill="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
fill="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_fill_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
tail(df)
max(df$Date)
datebreaks <- seq(as.Date("2020-03-06), as.Date(max(df$Date)), by=1)
datebreaks
datebreaks <- seq(as.Date("2020-03-06"), as.Date(max(df$Date)), by=1)
datebreaks
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="top") +
scale_x_date(breaks=datebreaks) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
library(tidyverse)
library(lubridate)
library(scales)
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
scale_x_date(breaks=datebreaks, labels=scales::date_format("%b %d")) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
#scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_x_date(date_breaks = "1 week", date_labels =  "%b %Y")
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
#scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_x_date(date_breaks = "1 week", date_labels =  "%b %Y") +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
#scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_x_date(date_breaks = "1 week", date_labels =  "%b %d) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
#scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_x_date(date_breaks = "1 week", date_labels =  "%b %d") +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
detach("package:scales", unload = TRUE)
library(tidyverse)
library(lubridate)
data <- read_csv("PACountyCovid19.csv")
nh <- read_csv("NursingHomes.csv")
glimpse(data)
summary(data)
# convert Date to datetime format
data$Date <- mdy(data$Date)
# fill NAs with 0
data <- data %>% replace(is.na(.), 0)
data %>% distinct(County)
# clean County columns
# remove _ at beginning of county name
data$County <- str_remove(data$County, "\xca$")
data$County <- str_remove(data$County, "^_")
data %>% distinct(County)
glimpse(nh)
# convert Date to datetime format
nh$Date <- mdy(nh$Date)
# convert Cases_Employees to numeric
nh$Cases_Employees <- as.numeric(nh$Cases_Employees)
nh %>% distinct(County) %>% arrange(County)
summary(nh)
# create total NH_Cases column
nh <- nh %>% mutate(NH_TotalCases = Cases_Residents + Cases_Employees)
# join nh to data
df <- left_join(data, nh, by = c("Date","County")) %>%
# fill NAs with 0
replace(is.na(.), 0)
df
# change Deaths.x to Deaths and Deaths.y to NH_Deaths
names(df) <- c("Date","County","Total_Cases","Negatives","Deaths","NH_Facilities","NH_ResidentCases","NH_EmployeeCases","NH_Deaths","NH_TotalCases")
str(df)
# create Non NH Cases, NH percentage of cases, Non NH Deaths, NH percentage of deaths
df <- df %>% mutate(NonNH_Cases = Total_Cases - NH_TotalCases,
NH_Pct_Cases = round(NH_TotalCases/Total_Cases*100,2),
NonNH_Deaths = Deaths - NH_Deaths,
NH_Pct_Deaths = round(NH_Deaths/Deaths*100,2))
df
# reshape dataframe from wide to long
df_gathered <- gather(df, measurement, value, Total_Cases:NH_Pct_Deaths, factor_key = TRUE)
df_gathered
table(df_gathered$measurement)
cases <- c("NH_TotalCases", "NonNH_Cases")
deaths <- c("NH_Deaths", "NonNH_Deaths")
datebreaks <- seq(as.Date("2020-03-06"), as.Date(max(df$Date)), by=1)
datebreaks
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
#scale_x_date(breaks=datebreaks, labels=date_format("%b %d")) +
scale_x_date(date_breaks = "1 week", date_labels =  "%b %d") +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
scale_x_date(breaks=datebreaks) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
df_gathered %>% filter(County=="Montgomery" & measurement==cases) %>%
ggplot() +
geom_line(aes(Date, value, color=measurement)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 7),
legend.position="top") +
#scale_x_date(breaks=datebreaks) +
scale_color_discrete(labels=c("Nursing Home Cases","Non-Nursing Home Cases")) +
labs(title = "Montgomery County Cases",
caption = "Data Source: Pennsylvania Department of Health",
x = "", y = "Number of Cases",
color="")
# Get daily data from https://www.health.pa.gov/topics/disease/coronavirus/Pages/Cases.aspx
# Daily updates are posted at 12pm
# This script will run daily at 12:05pm
# load necessary packages
packages <- c("rvest", "tidyverse", "data.table")
missing.packages <- setdiff(packages,installed.packages()[,"Package"])
if(length(missing.packages)) install.packages(missing.packages)
for(pkg in packages) {
do.call("library",list(pkg))
}
# get today's date
today <- Sys.Date()
yesterday <- today - 1
# read in data from webpage
url <- "https://www.health.pa.gov/topics/disease/coronavirus/Pages/Cases.aspx"
webpage <- xml2::read_html(url)
# get date from first <em> node
# get all emnodes
emnodes <- webpage %>% html_nodes("em")
# select first emnode and extract text
datetext <- emnodes[[1]] %>% html_text()
# extract the date from the text
statsdate <- as.Date( gsub( ".*(\\d{1,2}/\\d{1,2}/\\d{4}).*", "\\1", datetext) , format="%m/%d/%Y")
# check if data has been updated
if (statsdate == today) {
# get total cases table (first table on the page)
totalcases <- rvest::html_table(webpage, header = TRUE)[[1]]
# assign appropriate table names
names(totalcases) <- c("Total_Cases","Deaths","Negative")
# Function to replace thousands commas with empty value
replaceCommas<-function(x){
x<-as.numeric(gsub("\\,", "", x))
}
# apply replaceCommas to the dataframe and assign back to the dataframe as a dataframe
totalcases<- as.data.frame(lapply(totalcases, replaceCommas))
# add a date column
totalcases$Date <- statsdate
totalcases
# get county case data
countycases <- rvest::html_table(webpage, header = TRUE)[[4]]
# add a date column
countycases$Date <- statsdate
names(countycases) <- c("County","Total_Cases", "Negatives","Deaths","Date")
# reorder columns to make Date first to match previous CSV file
countycases <- countycases %>% select(Date, everything())
glimpse(countycases)
# get nursing home data
nursinghomes <- rvest::html_table(webpage, header = TRUE)[[8]]
glimpse(nursinghomes)
# remove last row which is total for all of PA
nursinghomes <- nursinghomes[-nrow(nursinghomes),]
# add a date column
nursinghomes$Date <- statsdate
names(nursinghomes) <- c("County","NumFacilities","Cases_Residents","Cases_Employees","Deaths","Date")
# convert County names to Sentence case
nursinghomes$County <- str_to_sentence(nursinghomes$County, locale = "en")
# instead of a 0 for no cases, a . is appearing in Cases_Employees
nursinghomes <- nursinghomes %>%
mutate(Cases_Employees = replace(Cases_Employees, Cases_Employees == '.', "0"))
# reorder columns to match previous CSV file
nursinghomes <- nursinghomes %>% select(Date, everything())
# convert Cases_Employees to numeric
nursinghomes$Cases_Employees <- as.numeric(nursinghomes$Cases_Employees)
# create Total Cases column
nursinghomes <- nursinghomes %>% mutate(NH_TotalCases = Cases_Residents + Cases_Employees)
glimpse(nursinghomes)
# write to csv
write_csv(totalcases, paste0("data/",statsdate,"_totalcases.csv"),col_names=TRUE)
write_csv(countycases, paste0("data/",statsdate,"_countycases.csv"),col_names=TRUE)
write_csv(nursinghomes, paste0("data/",statsdate,"_nursinghomes.csv"),col_names=TRUE)
# read in county data from yesterday
data <- read_csv(paste0("data/PACountyCovid19_",yesterday,".csv"))
# convert Date to datetime format for original dataframe
#data$Date <- mdy(data$Date)
# combine new data with previous data
countydata <- rbind(data,countycases)
# write to new csv file
write_csv(countydata, paste0("data/PACountyCovid19_",today,".csv"), col_names = TRUE)
# read in Nursing Home Data from yesterday
nh <- read_csv(paste0("data/NursingHomes_",yesterday,".csv"))
# convert Date to datetime format for original dataframe
#nh$Date <- mdy(nh$Date)
# combine new data with previous data
nh_data <- rbind(nh,nursinghomes)
# write to new csv file
write_csv(nh_data, paste0("data/NursingHomes_",today,".csv"), col_names = TRUE)
} else{
print("Website has not yet been updated today.")
}
write_csv(totalcases, paste0("data/",statsdate,"_totalcases.csv"),col_names=TRUE)
write_csv(totalcases, paste0(statsdate,"_totalcases.csv"),col_names=TRUE)
# set directory to write data
dir <- "data/"
write_csv(totalcases, paste0(dir,statsdate,"_totalcases.csv"),col_names=TRUE)
write_csv(countycases, paste0("data\\",statsdate,"_countycases.csv"),col_names=TRUE)
getwd()
file.path(getwd(), directory)
dirname(parent.frame(2)$ofile)
getSrcDirectory(function(x) {x})
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
write_csv(totalcases, paste0("data/",statsdate,"_totalcases.csv"),col_names=TRUE)
write_csv(countycases, paste0("data/",statsdate,"_countycases.csv"),col_names=TRUE)
write_csv(nursinghomes, paste0("data/",statsdate,"_nursinghomes.csv"),col_names=TRUE)
write_csv(countydata, paste0("data/PACountyCovid19_",today,".csv"), col_names = TRUE)
# Get daily data from https://www.health.pa.gov/topics/disease/coronavirus/Pages/Cases.aspx
# Daily updates are posted at 12pm
# This script will run daily at 12:05pm
# set working directory to parent directory of this file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load necessary packages
packages <- c("rvest", "tidyverse", "data.table")
missing.packages <- setdiff(packages,installed.packages()[,"Package"])
if(length(missing.packages)) install.packages(missing.packages)
for(pkg in packages) {
do.call("library",list(pkg))
}
# set directory to write data
dir <- "data/"
# get today's date
today <- Sys.Date()
yesterday <- today - 1
# read in data from webpage
url <- "https://www.health.pa.gov/topics/disease/coronavirus/Pages/Cases.aspx"
webpage <- xml2::read_html(url)
# get date from first <em> node
# get all emnodes
emnodes <- webpage %>% html_nodes("em")
# select first emnode and extract text
datetext <- emnodes[[1]] %>% html_text()
# extract the date from the text
statsdate <- as.Date( gsub( ".*(\\d{1,2}/\\d{1,2}/\\d{4}).*", "\\1", datetext) , format="%m/%d/%Y")
# check if data has been updated
if (statsdate == today) {
# get total cases table (first table on the page)
totalcases <- rvest::html_table(webpage, header = TRUE)[[1]]
# assign appropriate table names
names(totalcases) <- c("Total_Cases","Deaths","Negative")
# Function to replace thousands commas with empty value
replaceCommas<-function(x){
x<-as.numeric(gsub("\\,", "", x))
}
# apply replaceCommas to the dataframe and assign back to the dataframe as a dataframe
totalcases<- as.data.frame(lapply(totalcases, replaceCommas))
# add a date column
totalcases$Date <- statsdate
totalcases
# get county case data
countycases <- rvest::html_table(webpage, header = TRUE)[[4]]
# add a date column
countycases$Date <- statsdate
names(countycases) <- c("County","Total_Cases", "Negatives","Deaths","Date")
# reorder columns to make Date first to match previous CSV file
countycases <- countycases %>% select(Date, everything())
glimpse(countycases)
# get nursing home data
nursinghomes <- rvest::html_table(webpage, header = TRUE)[[8]]
glimpse(nursinghomes)
# remove last row which is total for all of PA
nursinghomes <- nursinghomes[-nrow(nursinghomes),]
# add a date column
nursinghomes$Date <- statsdate
names(nursinghomes) <- c("County","NumFacilities","Cases_Residents","Cases_Employees","Deaths","Date")
# convert County names to Sentence case
nursinghomes$County <- str_to_sentence(nursinghomes$County, locale = "en")
# instead of a 0 for no cases, a . is appearing in Cases_Employees
nursinghomes <- nursinghomes %>%
mutate(Cases_Employees = replace(Cases_Employees, Cases_Employees == '.', "0"))
# reorder columns to match previous CSV file
nursinghomes <- nursinghomes %>% select(Date, everything())
# convert Cases_Employees to numeric
nursinghomes$Cases_Employees <- as.numeric(nursinghomes$Cases_Employees)
# create Total Cases column
nursinghomes <- nursinghomes %>% mutate(NH_TotalCases = Cases_Residents + Cases_Employees)
glimpse(nursinghomes)
# write to csv
write_csv(totalcases, paste0("data/",statsdate,"_totalcases.csv"),col_names=TRUE)
write_csv(countycases, paste0("data/",statsdate,"_countycases.csv"),col_names=TRUE)
write_csv(nursinghomes, paste0("data/",statsdate,"_nursinghomes.csv"),col_names=TRUE)
# read in county data from yesterday
data <- read_csv(paste0("data/PACountyCovid19_",yesterday,".csv"))
# convert Date to datetime format for original dataframe
#data$Date <- mdy(data$Date)
# combine new data with previous data
countydata <- rbind(data,countycases)
# write to new csv file
write_csv(countydata, paste0("data/PACountyCovid19_",today,".csv"), col_names = TRUE)
# read in Nursing Home Data from yesterday
nh <- read_csv(paste0("data/NursingHomes_",yesterday,".csv"))
# convert Date to datetime format for original dataframe
#nh$Date <- mdy(nh$Date)
# combine new data with previous data
nh_data <- rbind(nh,nursinghomes)
# write to new csv file
write_csv(nh_data, paste0("data/NursingHomes_",today,".csv"), col_names = TRUE)
} else{
print("Website has not yet been updated today.")
}
